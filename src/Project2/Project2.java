package Project2;

/**
 * Έστω πίνακας n ακεραίων,
 * θελουμε να βρουμε τον υποπινακα με το μεγαλυτερο συνολο!
 */
public class Project2 {

    public static void main(String[] args) {

        // Εστώ ο πίνακας από το παράδειγμα της άσκησης
        int[] arr = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
        int totalMax = maxSubArray(arr);
        System.out.println("Το maxSubArray του πινακα arr ειναι: " + totalMax);
    }

    /**
     * Υπολογίζει τον υποπίνακα ενος array  με το μεγαλύτερο αθροισμα
     * @param arr το array που θελουμε να επεξεργαστούμε
     * @return θα επιστρεφει  ακεραιο
     */
    public static int maxSubArray(int[] arr){
        // Τσέκαρουμε αν ο πινακας ειναι κενός
        if (arr.length == 0) return 0;


        // Χρείαζομαστε δυο μεταβλήτες η μια που θα έχει το τρέχον μέγιστο και η αλλη το τελικό μέγιστο
        // Εστώ οτι το arr[0] ειναι μεγαλύτερο
        int  currentMax = arr[0];
        int  subArrayMax = arr[0];

        // Χρειαζόμαστε μια for για να ελένξουμε τα περιεχόμενα του  arr
        for (int i = 0; i < arr.length; i++){
            // Ελένχει με το Math.max ποιό απο τα δύο ειναι το μέγιστο
            // Αν το currentMax + arr[i] ειναι μεγαλύτερο  συνεχιζει ο ελενχος και κανει προσθεση με τον επόμενο αριθμό του
            // πινακα . Αν το arr[i] > currentMax + arr[i] τοτε ξεκιναζει ξανα απο την αρχη και μετραει ενα αθροισμα ενος υποπίνακα οπου
            // αρχιζει απο την θεση arr[i] .
            currentMax = Math.max(arr[i], currentMax + arr[i]);

            // Για το τελικό μεγιστο πρέπει να συγκρίνουμε κάθε φορά αν το προσωρινό μεγιστο με το τελίκο μεγιστο
            // Αν το προσωρινό μέγιστο ειναι μεγαλύτερο απο το τελίκο μέγιστο τοτε  το subArrayMax = currentMax
            subArrayMax = Math.max(currentMax , subArrayMax);


        }

        return subArrayMax;

    }

    // Γ ) Η συνάρτηση  maxSubArray ειναι γραμίκη συνάρτηση δήλαδη  ενα array  με  n περιεχόμενα θα κανει
    // N χρόνο κοι ομοιως ενα με 2*N θα κανει 2*χρονο . Γιάτι στο for τσεκαρει τα στοίχεια ένα ενα
    // οποτε η συναρτηστη θα εκτελεστει N φορες για να βρουμε το επιθυμητό αποτέλεσμα, αρα εχούμε όντως μια συνάρτηστη Ο(n) .
}
